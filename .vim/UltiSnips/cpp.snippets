snippet atcoder "Template for AtCoder" b
#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;

int main() {
	$1
}
endsnippet

snippet inc "#include<>" b
#include <${1:iostream}>$2
endsnippet

snippet std "using namespace std;" b
using namespace std;
$1
endsnippet

snippet main "int main()" b
int main() {
	$1
}
endsnippet

snippet yorn "Output Yes or No" b
if (${1:flag}) cout << "Yes" << endl;
else cout << "No" << endl;
endsnippet

snippet Yorn "Output YES or NO" b
if (${1:flag}) cout << "YES" << endl;
else cout << "NO" << endl;
endsnippet

snippet fori "for (0, N)" b
for (int ${1:i} = 0; i < ${2:MAX}; i++) {
	$3
}
endsnippet

snippet def "function template" b
${1:int} ${2:func_name}(${3:void}) {
	$4
}
endsnippet

snippet struct "struct template" b
struct ${1:name} {
	$2
};
endsnippet

snippet foreach "for x in X" b
for (auto x : ${1:X}) {
	$2
}
endsnippet

snippet cout "cout << " b
cout << $1
endsnippet

snippet cin "cin >> " b
cin >> $1
endsnippet

snippet vec "vector<T> v" i
vector<${1:int}> $2
endsnippet

snippet vvec "vector<vector<T>>" i
vector<vector<${1:int}> > $2
endsnippet

snippet pair "pair<T, T>" i
pair<${1:int}, ${2:int}> $3
endsnippet

snippet map "map<Key, T>" i
map<${1:int}, ${2:int}> $3
endsnippet

snippet umap "unordered_map<Key, T>" i
unordered_map<${1:int}, ${2:int}> $3
endsnippet

snippet set "set<T>" i
set<${1:int}> $2
endsnippet

snippet uset "unordered_set" i
unordered_set<${1:int}> $2
endsnippet

snippet que "queue<T>" b
queue<${1:int}> ${2:que}
endsnippet

snippet stack "stack<T>" b
stack<${1:int}> ${2:st}
endsnippet

snippet deq "deque<T>" b
deque<${1:int}> ${2:deq}
endsnippet
